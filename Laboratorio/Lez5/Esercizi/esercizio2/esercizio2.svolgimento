[quaglia@belbo circuiti-sequenziali]$ sis
UC Berkeley, SIS 1.3
        (compiled 25-Jan-02 at 10:59 AM)
sis> read_blif esercizio2.blif

************* se su carta e' stata disegnata una FSM di Moore
************* allora il file risultante potrebbe essere questo

sis> print_stats
esercizio2      pi= 2   po= 1   nodes=  1       latches= 0
lits(sop)=   0  #states(STG)=   5

************* notare la presenza di 5 stati ***************

sis> simulate 0 0

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 0
Next state: B ((null))

sis> simulate 1 1

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 0
Next state: C ((null))

sis> simulate 0 0

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 0
Next state: D ((null))

sis> simulate 1 1

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 0
Next state: C ((null))

sis> simulate 0 0

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 0
Next state: D ((null))

sis> simulate 0 1

Network simulation:
Outputs: 0
Next state:

STG simulation:
Outputs: 1
Next state: E ((null))

************* notare che STG simulation funzione mentre Network simulation non 
************* funziona perche' non e' ancora stato generato il circuito sequenziale

sis> state_minimize stamina
Running stamina, written by June Rho, University of Colorado at Boulder
Number of states in original machine : 5
Number of states in minimized machine : 4

************* stato A e E sono equivalenti

sis> print_stats
esercizio2      pi= 2   po= 1   nodes=  1       latches= 0
lits(sop)=   0  #states(STG)=   4

************* latches (elementi di memoria) e lits (letterali)
************* sono a 0 perche' non e' ancora stato generato il circuito sequenziale

sis> state_assign jedi
Running jedi, written by Bill Lin,  UC Berkeley

************ viene generato il circuito sequenziale e quindi
************ latches e lits avranno da adesso valori significativi

sis> print_stats
esercizio2      pi= 2   po= 1   nodes=  3       latches= 2
lits(sop)=  14  #states(STG)=   4

sis> write_blif
.model esercizio2
.inputs i0 i1
.outputs out
.latch    [4] LatchOut_v2   0
.latch    [5] LatchOut_v3   1
.start_kiss
.i 2
.o 1
.p 16
.s 4
.r S0
00 S0 S1 0
01 S0 S0 0
10 S0 S0 0
11 S0 S0 0
00 S1 S1 0
01 S1 S0 0
10 S1 S0 0
11 S1 S2 0
00 S2 S3 0
01 S2 S0 0
10 S2 S0 0
11 S2 S0 0
00 S3 S1 0
01 S3 S0 1
10 S3 S0 0
11 S3 S2 0
.end_kiss
.latch_order LatchOut_v2 LatchOut_v3
.code S0 01
.code S1 11
.code S2 00
.code S3 10
.names i0 i1 [4]
00 1
.names i0 i1 LatchOut_v2 LatchOut_v3 [5]
01-- 1
-01- 1
1-0- 1
-0-1 1
.names i0 i1 LatchOut_v2 LatchOut_v3 out
0110 1
.end

************ circuito sequenziale generato

************ se si vuole stampare solo le transizioni di
************ stato usare write_kiss

sis> write_kiss

.i 2
.o 1
.p 16
.s 4
.r S0
00 S0 S1 0
01 S0 S0 0
10 S0 S0 0
11 S0 S0 0
00 S1 S1 0
01 S1 S0 0
10 S1 S0 0
11 S1 S2 0
00 S2 S3 0
01 S2 S0 0
10 S2 S0 0
11 S2 S0 0
00 S3 S1 0
01 S3 S0 1
10 S3 S0 0
11 S3 S2 0

sis> quit
